using SMO_AZS.Infrastructure;
using System;
using System.Collections.Generic;
using System.Reflection;

namespace SMO_AZS.Models
{
    public partial class Очередь_с_неограниченным_ожиданием : IQueue
    {
        /// <summary>
        /// Расчёт характеристик очереди с неограниченным ожиданием
        /// </summary>
        public void CalcProperties()
        {
            double sumpK = 0d;

            for (int k = 0; k <= Исходные_данные.Число_каналов; k++)
                sumpK += Math.Pow(Исходные_данные.Интенсивность_нагрузки, k) / k.Factorial();

            double v = Math.Pow(Исходные_данные.Интенсивность_нагрузки, Исходные_данные.Число_каналов + 1);
            int v1 = Исходные_данные.Число_каналов.Factorial();
            double v2 = Исходные_данные.Число_каналов - Исходные_данные.Интенсивность_нагрузки;
            Вероятность_простоя_каналов_обслуживания__когда_нет_заявок = 1 / (sumpK + v / (v1 * v2));
            Вероятность_занятости_обслуживанием_всех_каналов = Math.Pow(Исходные_данные.Интенсивность_нагрузки, Исходные_данные.Число_каналов) * Вероятность_простоя_каналов_обслуживания__когда_нет_заявок / Исходные_данные.Число_каналов.Factorial();
            Вероятность_того__что_заявка_окажется_в_очереди = Math.Pow(Исходные_данные.Интенсивность_нагрузки, Исходные_данные.Число_каналов + 1) / (Исходные_данные.Число_каналов.Factorial() * (Исходные_данные.Число_каналов - Исходные_данные.Интенсивность_нагрузки)) * Вероятность_простоя_каналов_обслуживания__когда_нет_заявок;
            Среднее_число_заявок_в_очереди = Math.Pow(Исходные_данные.Интенсивность_нагрузки, Исходные_данные.Число_каналов + 1) / ((Исходные_данные.Число_каналов - 1).Factorial() * Math.Pow(Исходные_данные.Число_каналов - Исходные_данные.Интенсивность_нагрузки, 2)) * Вероятность_простоя_каналов_обслуживания__когда_нет_заявок;
            Среднее_время_ожидания_заявки_в_очереди_в_минутах = Среднее_число_заявок_в_очереди / Исходные_данные.Интенсивность_входного_потока__число_клиентов_;
            Среднее_время_пребывания_заявки_в_СМО_в_минутах = Среднее_время_ожидания_заявки_в_очереди_в_минутах + Исходные_данные.Среднее_время_обслуживания_одной_заявки_в_минутах;
            Среднее_число_занятых_обслуживанием_каналов = Исходные_данные.Интенсивность_нагрузки;
            Среднее_число_свободных_каналов = Исходные_данные.Число_каналов - Среднее_число_занятых_обслуживанием_каналов;
            Коэффициент_занятости_каналов_обслуживания = Среднее_число_занятых_обслуживанием_каналов / Исходные_данные.Число_каналов;
            Среднее_число_заявок_в_СМО = Среднее_число_заявок_в_очереди + Среднее_число_занятых_обслуживанием_каналов;
        }

        /// <summary>
        /// Получение обобщённого списка значений свойств очерди 
        /// </summary>
        /// <returns></returns>
        public QueueViewModel GetQueueViewModel()
        {
            QueueViewModel queueViewModel = new QueueViewModel()
            {
                Исходные_Данные = Исходные_данные
            };

            List<PropertyInfo> _properties = GetType().GetPropertyInfo();

            for (int i = 0; i < _properties.Count; i++)
            {
                double value = Convert.ToDouble(_properties[i].GetValue(this));
                queueViewModel.PropertiesValue.Add(_properties[i].Name.ClearingMemberInfoName(), value);
            }

            return queueViewModel;
        }
    }
}